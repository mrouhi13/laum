# Generated by Django 2.2.2 on 2019-06-27 13:02

from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import web.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='تاریخ به\u200cروزرسانی')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')),
                ('pid', models.CharField(db_index=True, default=web.models.generate_pid, max_length=16, unique=True, verbose_name='شناسه\u200cی عمومی')),
                ('title', models.CharField(db_index=True, max_length=128, verbose_name='عنوان')),
                ('subtitle', models.CharField(blank=True, db_index=True, max_length=128, verbose_name='زیرعنوان')),
                ('content', models.TextField(db_index=True, max_length=1024, verbose_name='محتوا')),
                ('event', models.CharField(blank=True, db_index=True, help_text='تاریخ یک رویداد مهم برای موضوع وارد شده به همراه محل وقوع.', max_length=128, verbose_name='رویداد مهم')),
                ('image', models.ImageField(blank=True, upload_to='images', verbose_name='تصویر')),
                ('image_caption', models.CharField(blank=True, db_index=True, help_text='مکان و موقعیت گرفتن عکس به همراه معرفی افراد حاضر در عکس.', max_length=128, verbose_name='توضیح تصویر')),
                ('reference', models.CharField(blank=True, help_text='نام کتاب، روزنامه، مجله یا آدرس سایت، بلاگ و... به همراه نام نویسنده', max_length=128, verbose_name='منبع')),
                ('website', models.URLField(blank=True, verbose_name='وب\u200cسایت')),
                ('author', models.EmailField(blank=True, max_length=254, verbose_name='ایمیل نویسنده')),
                ('is_active', models.BooleanField(default=False, help_text='مشخص می\u200cکند که این صفحه در لیست نتایج قابل دیدن باشد یا نه.', verbose_name='فعال')),
            ],
            options={
                'verbose_name': 'صفحه',
                'verbose_name_plural': 'صفحه\u200cها',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='تاریخ به\u200cروزرسانی')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')),
                ('name', models.CharField(db_index=True, max_length=50, unique=True, verbose_name='نام')),
                ('keyword', models.SlugField(allow_unicode=True, verbose_name='کلیدواژه')),
                ('is_active', models.BooleanField(default=True, help_text='مشخص می\u200cکند که این برچسب قابل استفاده باشد یا نه.', verbose_name='فعال')),
            ],
            options={
                'verbose_name': 'برچسب',
                'verbose_name_plural': 'برچسب\u200cها',
            },
        ),
        migrations.CreateModel(
            name='WebsiteSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('setting', models.CharField(choices=[('site_slogan_1', 'شعار ۱'), ('site_slogan_2', 'شعار ۲'), ('default_keywords', 'کلید واژه\u200cهای پیش\u200cفرض'), ('default_description', 'توضیح پیش\u200cفرض'), ('contact_email', 'ایمیل ارتباطی'), ('notification_email', 'ایمیل اطلاع\u200cرسانی'), ('google_analytics_id', 'شناسه\u200cی Google Analytics')], help_text='از هر تنطیم فقط یک نمونه می\u200cتوانید ایجاد کنید.', max_length=32, unique=True, verbose_name='تنظیم')),
                ('content', models.CharField(help_text='محتوایی که در سایت نمایش داده می\u200cشود.', max_length=1024, verbose_name='محتوا')),
            ],
            options={
                'verbose_name': 'تنظیم',
                'verbose_name_plural': 'تنظیمات وب سایت',
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated_on', models.DateTimeField(auto_now=True, verbose_name='تاریخ به\u200cروزرسانی')),
                ('created_on', models.DateTimeField(auto_now_add=True, verbose_name='تاریخ ایجاد')),
                ('refid', models.CharField(max_length=32, null=True, unique=True, verbose_name='شناسه\u200cی ارجاع')),
                ('body', models.TextField(max_length=1024, verbose_name='متن گزارش')),
                ('reporter', models.EmailField(max_length=254, verbose_name='ایمیل گزارش\u200cدهنده')),
                ('description', models.TextField(blank=True, help_text='درصورتی که نیاز به یادآوری توضیحاتی در آینده وجود دارد در این قسمت وارد کنید.        هم\u200cچنین در صورت رد گزارش محتوای این فیلد برای کاربر ارسال می\u200cشود.', max_length=1024, verbose_name='توضیحات')),
                ('status', models.CharField(choices=[('pending', 'در انتظار'), ('accepted', 'تایید شده'), ('denied', 'رد شده')], default='pending', help_text='در تعیین وضیعت رسیدگی دقت کنید. این قسمت تنها یک بار قابل تفییر است.', max_length=32, verbose_name='وضعیت رسیدگی')),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='web.Page', to_field='pid', verbose_name='صفحه')),
            ],
            options={
                'verbose_name': 'گزارش',
                'verbose_name_plural': 'گزارش\u200cها',
            },
        ),
        migrations.AddField(
            model_name='page',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='tags', related_query_name='tag', to='web.Tag', verbose_name='برچسب\u200cها'),
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(error_messages={'unique': 'کاربری با این ایمیل وجود دارد.'}, max_length=254, unique=True, verbose_name='Email')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'کاربر',
                'verbose_name_plural': 'کاربران',
            },
            managers=[
                ('objects', web.models.UserManager()),
            ],
        ),
    ]
